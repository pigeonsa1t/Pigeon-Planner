HOW TO CREATE A MOMENT OBJECT:

- Source: watching this video by: dcode
    "Parsing Date Time Strings - Moment.js Tutorial #2"
        https://www.youtube.com/watch?v=TVJ-fuwr4gs&list=PLVvjrrRCBy2LWFkR7opQxWp4z0en6OHgw&index=2
##############################################################################################
CURRENT DATE + TIME:
    - This should be inlcuded in whichever method you choose:

<script>
    console.log(moment());
        let m = moment();
    ...;
</script>


* In DevTools: 
    " toString() => ${m.toString()} "
    " toISOString() => ${m.toISOString()} " 
____________________________________________

##############################################################################################


1. FIRST WAY TO CREATE A MOMENT OBJECT:

    console.log(m);
    * This is basically a "beefed up" date object.

OBSERVATION:
    Compare this
        " console.log(m); " 

    to previous 
        " console.log(moment()); "


WHEN YOU CREATE A MOMENT OBJECT, THEY ARE BY DEFAULT IN "LOCAL MODE"

    What this means is: When you're displaying/formatting date/time from moment object...
        ...they will display in your own local time zone.

_____________________________________________________________________
TO DEMONSTRATE: 

    console.log('toString() => ${m.toString()}');
    * This will give me date/time of 'm' moment object in my local time zone

    console.log('toISOString() => ${m.toISOString()}');
    * This will give me 'm' moment 'date/time' string in an ISO 8601 format in UTC.

##############################################################################################


2. SECOND WAY TO CREATE MOMENT OBJECT:
- Create from ISO 8601 formatted 'DATE/TIME' string

    m = moment('2022-04-03T23:10:00.000');  

An ISO 8601 string is a standard for displaying dates and times.
    * Most languages will have a way ( either natively  through an extension )
        to output your dates and times in this format.  
    * So, you should be safe just simply parsing by passing through an ISO 8601 'DATE/TIME' string.

This will give me date/time of 'm' moment object in my local time zone

    console.log('toISOString() => ${m.toISOString()}');

This will give me 'm' moment 'date/time' string in an ISO 8601 format in UTC.

_____________________________________________________________________

** HELP!!

    FOR SOME REASON - ^^ THIS IS NOT SHOWING UP ON CHROME DEV TOOLS FOR ME...
    IT CONSOLE LOGS EXACTLY WHAT I TYPED INSTEAD OF THE INFO IT ASKS FOR.

##############################################################################################


3. THIRD WAY TO CREATE MOMENT OBJECT: 
- Parsing using a format
    * most reccomended way to parse using moment.js
    * will guaruntee you will get accurate results each time 

Start with this:

    m = moment(' ');

Here we are passing in a random daytime string:

    m = moment('04/03/2022 02:45PM');

If you want moment.js to accurately pick up this day, parse in a second argument (*a format):

    m = moment('04/03/2022 02:45PM', '');

_____________________________________________________________________
*** TIP: Go to the moment.js docs and go to "String + Format" section.
    Find which one of these matches up with which part of your daytime string.
_____________________________________________________________________
EXAMPLE:

    ("MM/DD/YYYY h:mmA")
Translation:
    2 digit Month
    2 digit Day
    4 digit Year 
    <space> 
    1 digit Hour: 
    = lowercase h
    h: mm
    mm = 2 digit Mins
    A = AM or PM

With this, we have successfully told moment was format this is in.
    Moment will now give me an accurate and well-formed date object.
_____________________________________________________________________

##############################################################################################


4. FOURTH WAY TO CREATE MOMENT OBJECT:
- Parsing using milliseconds (because of Epoch?)

Create using milliseconds since epoch (Jan 1st 1970):

    m = moment(600000)
    * This is = 10 minutes 

Create using seconds since epoch (Jan 1st 1970):

    m = moment.unix(7200):
    * This is = 2 hours

* The .unix method allows you to do it with seconds instead.
_____________________________________________________________________
/////////////////////////////////////////////////////////////////////
Now if you say...

    m = moment.utc();

... This will create a moment object in UTC mode. You get the exact same time for BOTH outputs
